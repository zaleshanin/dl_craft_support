.apply(function () {
    if(.tmp.craft==null) .tmp.craft = .Map();
    if(.tmp.craft.logging==null) .tmp.craft.logging = .Map();
    this = .tmp.craft.logging;
    
    //всякие переменные для скрипта
    TreeLog = .get_obj_index(28037); //бревно - результат рубки
    MaxTreeHP = 100;
    
    //топор, и его onUse, postUse
    var Axe; //просто переменная
    Axe = .get_obj_index(6000); //присваиваем переменной ссылку на прототип топора
    Axe.onUse = function (axe, ch, str) {
        if(ch.start_logging!=null) ch.start_logging = null;

        //уже рубим - прекращаем
        if(ch.logging!=null) {ch.logging=null;return true;}

        //не в инвентаре
        //TODO - подымаем!!!
        if(axe.getCarrier()!=ch) {
            ch.act('Возможно %1$O4 следует поднять.', axe);
            ch.recho("%1$^C1 дотрагивается до %2$O2.", ch, axe);
            return true;
        }

        //не вооружен
        //TODO - вооружаемся
        if(axe.wear_loc!='wield') {
            ch.act('%1$^O5 следует вооружиться.', axe);
            return true;
        }

        //не лес
        if(ch.in_room.sector_type!=.tables.sector_table.forest) {
            ch.act('Здесь нечего рубить. Ты с сожалением вздыхаешь.');
            ch.recho("%1$^C1 с сожалением вздыхает держа в руках %2$O4.", ch, axe);
            return true;
        }
        
        //всё вырубили //TODO v2 убрать - оставить только проверку сектора.
        if(ch.in_room.logging!=null && ch.in_room.logging.trees_health<=0) {
            ch.act('Здесь нечего рубить - вокруг одни пеньги.');
            ch.recho("%1$^C1 с %2$O4 в руках оглядывет окружающие пеньки.", ch, axe);
            return true;           
        }

        //дерёшься
        if (ch.position&.tables.position_table.fight) {
            ch.act('Сейчас ты и так делаешь %1$^O5 всё что можешь.', axe);
            return true;
        }

         //не стоишь
        if (!(ch.position&.tables.position_table.stand)) {
            ch.act('Рубить деревья можно только твёрдо стоя на ногах.');
            return true;
        }

        ch.start_logging = true;

        return true;
    };
    Axe.postUse = function(axe, ch, str) {
        try{
            if(.tmp.craft.logging==null) {
                ch.act('Ты собирал%Gось|ся|ась срубить дерево, но что-то пошло не так.',ch);
                throw "logging: no .tmp.craft.logging";
            }
            this = .tmp.craft.logging;

            if(ch.start_logging==null) return;
            else ch.start_logging=null;

            //TODO проверяем/генерим деревца.
            if(ch.in_room.logging==null) {
                loggingForestRoomInit(ch.in_room);
            }

            //TODO и вдруг... ЭНТ!
            //TODO начинаем рубить
            ch.act('Начинаем производственную гимнастику!'); //TODO убрать
            ch.logging=true;
            /*var chopsCount; chopsCount = getChopsCount(ch);*/
            var sleepInterval; sleepInterval = getSleepInterval(ch);
            var current_tree_quantity;
            current_tree_quantity = (ch.in_room.logging.trees_health / MaxTreeHP);
            if(ch.in_room.logging.trees_health % MaxTreeHP > 0) 
                current_tree_quantity = current_tree_quantity + 1;
            
            for( ; ch.in_room.logging.trees_health > (current_tree_quantity-1)*MaxTreeHP ; ) {
                sleepRoom(sleepInterval,ch,axe);

                makeOneHit(ch,axe);
                
                //TODO аффект когда всё вырублено (подробности в трелло-карточка рубки, феневый чат)
                //TODO v2 выгоднять из камуфляжа всех кто в комнате ))
            }
            ch.act('Закончили упражнение!');//TODO убрать

            if(isLoggingSuccessful(ch)) {
                ch.in_room.echo('Дерево с грохотом падает, превращаясь в качественное бревно!');
                logToRoom(ch.in_room);
            } else {
                ch.in_room.echo('Изрубленное в капусту дерево, падая превращается в кучу бесполезных щепок!');
            }
        }catch(e){
            catchMsg(e);
        }
        ch.logging=null;
    };
    //чар снимает топор - прекращаем рубить дерево
    Axe.onRemove = function (axe, ch) {
        if(ch.logging!=null) {ch.logging=null;}
    };

    //Всякие вспомонательные функции:

/*    //возвращает количество циклов рубки от одного use
    getChopsCount = function(ch) {
        var result;
        result = 20;
        if(.buildplot) result = result/5;
        
        //TODO наличие скилла (result=result-(result/4))

        //TODO наличие механика (result=result/2)

        return result;
    };
*/
    getSleepInterval = function(ch) {
        var result;
        result = 4;

        if(.buildplot) result=result/2;

        //TODO наличие хасты (result=result/2);

        //TODO наличие механика (result=result/2);

        return result;
    };

    isLoggingSuccessful = function(ch) {
        var limit;
        limit = 4;
        //TODO skill (limit=limit-2)
        //TODO mechanic  (limit=1)
        if(.buildplot) limit=2;
        if(.number_range(1,limit)!=1) return false;
        return true;
    };
    //делаем один удар(попытку)
    makeOneHit = function(ch,axe) {
        //удар расходует мувы
        var move_cost;
        move_cost = .number_range((ch.perm_move / 50) + 1, (ch.perm_move / 20) + 1); //расход мувов на один удар
        if(move_cost <= ch.move) {
            ch.move =  ch.move - move_cost;
        } else {
            ch.act("Ты слишком устал, чтобы рубить деревья.");
            ch.recho("%1$^C1 прекращает рубить дерево.", ch);
            throw "logging: ch not enough moves";
        }

        if(isHitSuccess(ch)) {
            ch.in_room.logging.trees_health = ch.in_room.logging.trees_health - getOneHitDamage(ch,axe);
            ch.act('Ты фигачишь %O5 по дереву!', axe);//TODO заменить фразу
        }
        
        //TODO отнимаем мувы
        //TODO наносим повреждением лесопосадкам

        //TODO "отец слышишь рубит?"
    };
    //повреждение от одного удара
    getOneHitDamage = function(ch,axe){
        var demage;
        //TODO v2 учет повреждения оружия
        //TODO v2 учёт DR
        //TOTO v2 усёт силы
        damage = 5;

        if(.buildplot) damage = 20;

        return damage;
    };
    //попал ли удар в дерево
    isHitSuccess = function(ch) {
        //TODO v2 влияние HR, скила, механиков
        return !.chanceOneOf(5);
    };
    logToRoom = function(room) {
        //ch.in_room.echo('...но оно бесследно изчезает!');
        TreeLog.create().obj_to_room(room);
    };

    //получаем количество деревьев в комнате
    getRoomTreesQuantity = function(room) {
        //TODO v2 количество в зависимости от наличия деревьев в окружающих комнатах, плюс рандом
        return 4;
    };
    //количество востанавливаемого деревом hp за раунд 
    getTreeRestoreHp = function(room) {
        //TODO v2 не востанавливать если нет деревьев в соседних клетках
        //TODO v2 влияние на востановление внешних факторов (лужа, огонь...)
        return 1;
    };

    //инициализация комнаты с деревьями
    loggingForestRoomInit = function(room) {
        this = room;
        if(logging!=null) throw('logging: room already inited');

        logging = .Map();

        //TODO рандом?
        logging.max_trees_health = .tmp.craft.logging.getRoomTreesQuantity(room) * .tmp.craft.logging.MaxTreeHP; //количество деревьев * на hp дерева 
        logging.trees_health = logging.max_trees_health;
        logging.sprouts_health = 0; //hp побега - при достижении 100 прибавляется к hp деревьев (если есть)

        //востановление деревьев. чистка полей комнаты после полного востановления
        onSpec = function() {
            //TODO один onSpec на все леса!!!

            //лес востановлен - чистим
            if(logging.trees_health == logging.max_trees_health) {
                .tmp.craft.logging.loggingForestRoomClean(this);
                return;
            }
            // востановление 400hp по 1hp в раз 4 секунды = 1600 секунд (~26 минут)
            var restore;
            restore = .tmp.craft.logging.getTreeRestoreHp(this); 
            var tree_quantity;
            tree_quantity = logging.trees_health / .tmp.craft.logging.MaxTreeHP; //количество уцелевших деревьев
            
            //TODO добавить debug чтоб проконтролировать рост деревьев
            
            //если дерево срублено не до конца - востанавливаем его
            if(tree_quantity > 0 && logging.trees_health % .tmp.craft.logging.MaxTreeHP > 0) {
                logging.trees_health = logging.trees_health + restore; 
                if(logging.trees_health / .tmp.craft.logging.MaxTreeHP > tree_quantity) {
                    tree_quantity = logging.trees_health / .tmp.craft.logging.MaxTreeHP;
                    restore = logging.trees_health % .tmp.craft.logging.MaxTreeHP;
                } else {
                    restore = 0;
                }
            }
            
            //когда дерево востановлено - ростим побеги
            if(logging.trees_health < logging.max_trees_health) {
                logging.sprouts_health = logging.sprouts_health + restore;
                //если деревья вырублены не все - добавляем каждые .tmp.craft.logging.MaxTreeHP (100) к деревьям
                if(tree_quantity>0) {
                    if(logging.sprouts_health>=.tmp.craft.logging.MaxTreeHP) {
                        restore = logging.sprouts_health % .tmp.craft.logging.MaxTreeHP;
                        logging.trees_health = logging.trees_health + ((logging.sprouts_health / .tmp.craft.logging.MaxTreeHP) * .tmp.craft.logging.MaxTreeHP);
                        logging.sprouts_health = restore;
                    } 
                } else { //если все деревья вырублены
                    //если ростков уже выросло как было леса изначально - востаналиваем
                    if(logging.sprouts_health>=logging.max_trees_health) {
                        logging.trees_health = logging.max_trees_health;
                        logging.sprouts_health = 0;
                    }
                }
            } 
        };
        //добавляем строчки о сотоянии леса
        onDescr = function(ch, description) {
            //TODO изменить описание после вырубки
            return description;
        };
    };

    //чистим комнату с деревьями
    loggingForestRoomClean = function(room) {
        this = room;
        logging = null;
        onSpec = null;
        onDescr = null;
    };

    //проверки, не стоит ли прервать наше увлекательное занятие
    sleepRoom = function(seconds, ch, axe) {
        var room;
        room = ch.in_room;

        var i;
        for(i = 0; i < seconds*4; i = i + 1) {
            .scheduler.sleep(1);
            //TODO в комнате закончились деревья

            //помер
            if (ch.dead)
                throw "logging: ch is dead";
            //покинул комнату
            if (room != ch.in_room){
                ch.act("Ты прекращаешь рубить дерево.");
                room.ppl.sub(ch).call.act("%1$^C1 прекращает рубить дерево.", ch);
                throw "logging: ch left the room";
            }
            //больше не стоим (деремся)
            if (!(ch.position&.tables.position_table.stand)) {
                ch.act("Ты не можешь продолжать рубить дерево.");
                ch.recho("%1$^C1 прекращает рубить дерево.", ch);
                throw "logging: ch not standing";
            }
            //передумал
            if(ch.logging==null) {
                ch.act("Ты прекращаешь рубить дерево.");
                ch.recho("%1$^C1 прекращает рубить дерево.", ch);
                throw "logging: second axe use or axe is removed";
            }
            //изчез топор из рук
            if(ch.get_eq_char('wield')!=axe) {
                ch.act("Ты не можешь рубить деревья не вооружившись топором.");
                room.ppl.sub(ch).call.act("%1$^C1 прекращает рубить дерево.", ch);
                throw "logging: axe is lost";
            }
        }
    };
    
    catchMsg = function(e) {
        var ch;
        ch = .get_char_world('Zaleshanin');
        if(ch==null)
            ch = .get_char_world('Miyamoto');

        if(ch!=null)
            ch.ptc('logging: '+e);
        else
            .print('logging: '+e);
    };
   


})
